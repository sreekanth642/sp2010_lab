'--------------------------------------------------------------------------------
' This file is a "Sample" from the SharePoint Foundation 2010
' Samples
'
' Copyright (c) Microsoft Corporation. All rights reserved.
'
' This source code is intended only as a supplement to Microsoft
' Development Tools and/or on-line documentation.  See these other
' materials for detailed information regarding Microsoft code samples.
' 
' THIS CODE AND INFORMATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY
' KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
' IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
' PARTICULAR PURPOSE.
'--------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4200
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


Partial Public Class SPLinqDataContext
	Inherits Microsoft.SharePoint.Linq.DataContext
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New(ByVal requestUrl As String)
		MyBase.New(requestUrl)
		Me.OnCreated
	End Sub
	
	'''<summary>
	'''Use the Announcements list to post messages on the home page of your site.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Announcements")>  _
	Public ReadOnly Property Announcements() As Microsoft.SharePoint.Linq.EntityList(Of Announcement)
		Get
			Return Me.GetList(Of Announcement)("Announcements")
		End Get
	End Property
	
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Bugs")>  _
	Public ReadOnly Property Bugs() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Bugs")
		End Get
	End Property
	
	'''<summary>
	'''Use the Calendar list to keep informed of upcoming meetings, deadlines, and other important events.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Calendar")>  _
	Public ReadOnly Property Calendar() As Microsoft.SharePoint.Linq.EntityList(Of CalendarEvent)
		Get
			Return Me.GetList(Of CalendarEvent)("Calendar")
		End Get
	End Property
	
	'''<summary>
	'''Use the reports list to customize the queries that appear in the Content and Structure Tool views
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Content and Structure Reports")>  _
	Public ReadOnly Property ContentAndStructureReports() As Microsoft.SharePoint.Linq.EntityList(Of ContentAndStructureReportsItem)
		Get
			Return Me.GetList(Of ContentAndStructureReportsItem)("Content and Structure Reports")
		End Get
	End Property
	
	'''<summary>
	'''This Document library has the templates to create Web Analytics custom reports for this site collection
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Customized Reports")>  _
	Public ReadOnly Property CustomizedReports() As Microsoft.SharePoint.Linq.EntityList(Of Document)
		Get
			Return Me.GetList(Of Document)("Customized Reports")
		End Get
	End Property
	
	'''<summary>
	'''Employees
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Employees")>  _
	Public ReadOnly Property Employees() As Microsoft.SharePoint.Linq.EntityList(Of EmployeesItem)
		Get
			Return Me.GetList(Of EmployeesItem)("Employees")
		End Get
	End Property
	
	'''<summary>
	'''This library contains administrator-approved form templates that were activated to this site collection.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Form Templates")>  _
	Public ReadOnly Property FormTemplates() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Form Templates")
		End Get
	End Property
	
	'''<summary>
	'''Use the Links list for links to Web pages that your team members will find interesting or useful.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Links")>  _
	Public ReadOnly Property Links() As Microsoft.SharePoint.Linq.EntityList(Of Link)
		Get
			Return Me.GetList(Of Link)("Links")
		End Get
	End Property
	
	'''<summary>
	'''Company Projects
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Projects")>  _
	Public ReadOnly Property Projects() As Microsoft.SharePoint.Linq.EntityList(Of ProjectsItem)
		Get
			Return Me.GetList(Of ProjectsItem)("Projects")
		End Get
	End Property
	
	'''<summary>
	'''Items in this list contain HTML or text content which can be inserted into web pages. If an item has automatic update selected, the content will be inserted into web pages as a read-only reference, and the content will update if the item is changed. If the item does not have automatic update selected, the content will be inserted as a copy in the web page, and the content will not update if the item is changed.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Reusable Content")>  _
	Public ReadOnly Property ReusableContent() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Reusable Content")
		End Get
	End Property
	
	'''<summary>
	'''Share a document with the team by adding it to this document library.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Shared Documents")>  _
	Public ReadOnly Property SharedDocuments() As Microsoft.SharePoint.Linq.EntityList(Of Document)
		Get
			Return Me.GetList(Of Document)("Shared Documents")
		End Get
	End Property
	
	'''<summary>
	'''Use this library to store files which are included on pages within this site, such as images on Wiki pages.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Site Assets")>  _
	Public ReadOnly Property SiteAssets() As Microsoft.SharePoint.Linq.EntityList(Of Document)
		Get
			Return Me.GetList(Of Document)("Site Assets")
		End Get
	End Property
	
	'''<summary>
	'''This system library was created by the Publishing Resources feature to store documents that are used throughout the site collection.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Site Collection Documents")>  _
	Public ReadOnly Property SiteCollectionDocuments() As Microsoft.SharePoint.Linq.EntityList(Of Document)
		Get
			Return Me.GetList(Of Document)("Site Collection Documents")
		End Get
	End Property
	
	'''<summary>
	'''This system library was created by the Publishing Resources feature to store images that are used throughout the site collection.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Site Collection Images")>  _
	Public ReadOnly Property SiteCollectionImages() As Microsoft.SharePoint.Linq.EntityList(Of Asset)
		Get
			Return Me.GetList(Of Asset)("Site Collection Images")
		End Get
	End Property
	
	'''<summary>
	'''Use this library to create and store pages on this site.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Site Pages")>  _
	Public ReadOnly Property SitePages() As Microsoft.SharePoint.Linq.EntityList(Of WikiPage)
		Get
			Return Me.GetList(Of WikiPage)("Site Pages")
		End Get
	End Property
	
	'''<summary>
	'''Use the style library to store style sheets, such as CSS or XSL files. The style sheets in this gallery can be used by this site or any of its subsites.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Style Library")>  _
	Public ReadOnly Property StyleLibrary() As Microsoft.SharePoint.Linq.EntityList(Of Document)
		Get
			Return Me.GetList(Of Document)("Style Library")
		End Get
	End Property
	
	'''<summary>
	'''Use the Tasks list to keep track of work that you or your team needs to complete.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Tasks")>  _
	Public ReadOnly Property Tasks() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Tasks")
		End Get
	End Property
	
	'''<summary>
	'''Use the Team Discussion list to hold newsgroup-style discussions on topics relevant to your team.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Team Discussion")>  _
	Public ReadOnly Property TeamDiscussion() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Team Discussion")
		End Get
	End Property
	
	'''<summary>
	'''This system library was created by the Publishing feature to store workflow tasks that are created in this site.
	'''</summary>
	<Microsoft.SharePoint.Linq.ListAttribute(Name:="Workflow Tasks")>  _
	Public ReadOnly Property WorkflowTasks() As Microsoft.SharePoint.Linq.EntityList(Of Item)
		Get
			Return Me.GetList(Of Item)("Workflow Tasks")
		End Get
	End Property
End Class

'''<summary>
'''Create a new list item.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Item", Id:="0x01"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Announcement)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Folder)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(BugItem)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType([Event])),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(ContentAndStructureReportsItem)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Document)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(EmployeesItem)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Link)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(ProjectsItem)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(ReusableHTML)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(ReusableText)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Task)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Message))>  _
Partial Public Class Item
	Implements Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
	
	Private _id As System.Nullable(Of Integer)
	
	Private _version As System.Nullable(Of Integer)
	
	Private _path As String
	
	Private _entityState As Microsoft.SharePoint.Linq.EntityState
	
	Private _originalValues As System.Collections.Generic.IDictionary(Of String, Object)
	
	Protected _title As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region

	Private Property EntityState() As Microsoft.SharePoint.Linq.EntityState Implements Microsoft.SharePoint.Linq.ITrackEntityState.EntityState
		Get
			Return Me._entityState
		End Get
		Set
			If (value <> Me._entityState) Then
				Me._entityState = value
			End If
		End Set
	End Property

	Private ReadOnly Property OriginalValues() As System.Collections.Generic.IDictionary(Of String, Object) Implements Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues
		Get
			If (Nothing Is Me._originalValues) Then
				Me._originalValues = New System.Collections.Generic.Dictionary(Of String, Object)
			End If
			Return Me._originalValues
		End Get
	End Property
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ID", Storage:="_id", [ReadOnly]:=true, FieldType:="Counter")>  _
	Public Property Id() As System.Nullable(Of Integer)
		Get
			Return Me._id
		End Get
		Set
			If (value <> Me._id) Then
				Me.OnPropertyChanging("Id", Me._id)
				Me._id = value
				Me.OnPropertyChanged("Id")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="owshiddenversion", Storage:="_version", [ReadOnly]:=true, FieldType:="Integer")>  _
	Public Property Version() As System.Nullable(Of Integer)
		Get
			Return Me._version
		End Get
		Set
			If (value <> Me._version) Then
				Me.OnPropertyChanging("Version", Me._version)
				Me._version = value
				Me.OnPropertyChanged("Version")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="FileDirRef", Storage:="_path", [ReadOnly]:=true, FieldType:="Lookup", IsLookupValue:=true)>  _
	Public Property Path() As String
		Get
			Return Me._path
		End Get
		Set
			If (value <> Me._path) Then
				Me.OnPropertyChanging("Path", Me._path)
				Me._path = value
				Me.OnPropertyChanged("Path")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Title", Storage:="_title", Required:=true, FieldType:="Text")>  _
	Public Overridable Property Title() As String
		Get
			Return Me._title
		End Get
		Set
			If (value <> Me._title) Then
				Me.OnPropertyChanging("Title", Me._title)
				Me._title = value
				Me.OnPropertyChanged("Title")
			End If
		End Set
	End Property
	
	Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
		RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
	End Sub
	
	Protected Overridable Sub OnPropertyChanging(ByVal propertyName As String, ByVal value As Object)
		If (Nothing Is Me._originalValues) Then
			Me._originalValues = New System.Collections.Generic.Dictionary(Of String, Object)
		End If
		If (false = Me._originalValues.ContainsKey(propertyName)) Then
			Me._originalValues.Add(propertyName, value)
		End If
		RaiseEvent PropertyChanging(Me, New System.ComponentModel.PropertyChangingEventArgs(propertyName))
	End Sub
End Class

'''<summary>
'''Create a new news item, status or other short piece of information.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Announcement", Id:="0x0104")>  _
Partial Public Class Announcement
	Inherits Item
	
	Private _body As String
	
	Private _expires As System.Nullable(Of Date)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Body", Storage:="_body", FieldType:="Note")>  _
	Public Property Body() As String
		Get
			Return Me._body
		End Get
		Set
			If (value <> Me._body) Then
				Me.OnPropertyChanging("Body", Me._body)
				Me._body = value
				Me.OnPropertyChanged("Body")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Expires", Storage:="_expires", FieldType:="DateTime")>  _
	Public Property Expires() As System.Nullable(Of Date)
		Get
			Return Me._expires
		End Get
		Set
			If (value <> Me._expires) Then
				Me.OnPropertyChanging("Expires", Me._expires)
				Me._expires = value
				Me.OnPropertyChanged("Expires")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new folder.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Folder", Id:="0x0120"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(SummaryTask)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Discussion))>  _
Partial Public Class Folder
	Inherits Item
	
	Private _name As String
	
	Private _itemChildCountId As System.Nullable(Of Integer)
	
	Private _itemChildCountItemChildCount As String
	
	Private _folderChildCountId As System.Nullable(Of Integer)
	
	Private _folderChildCountFolderChildCount As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="FileLeafRef", Storage:="_name", Required:=true, FieldType:="File")>  _
	Public Overridable Property Name() As String
		Get
			Return Me._name
		End Get
		Set
			If (value <> Me._name) Then
				Me.OnPropertyChanging("Name", Me._name)
				Me._name = value
				Me.OnPropertyChanged("Name")
			End If
		End Set
	End Property
	
	<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
	 Microsoft.SharePoint.Linq.RemovedColumnAttribute()>  _
	Public Overrides Property Title() As String
		Get
			Throw New System.InvalidOperationException("Field Title was removed from content type Folder.")
		End Get
		Set
			Throw New System.InvalidOperationException("Field Title was removed from content type Folder.")
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ItemChildCount", Storage:="_itemChildCountId", [ReadOnly]:=true, FieldType:="Lookup", IsLookupId:=true)>  _
	Public Property ItemChildCountId() As System.Nullable(Of Integer)
		Get
			Return Me._itemChildCountId
		End Get
		Set
			If (value <> Me._itemChildCountId) Then
				Me.OnPropertyChanging("ItemChildCountId", Me._itemChildCountId)
				Me._itemChildCountId = value
				Me.OnPropertyChanged("ItemChildCountId")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ItemChildCount", Storage:="_itemChildCountItemChildCount", [ReadOnly]:=true, FieldType:="Lookup", IsLookupValue:=true)>  _
	Public Property ItemChildCountItemChildCount() As String
		Get
			Return Me._itemChildCountItemChildCount
		End Get
		Set
			If (value <> Me._itemChildCountItemChildCount) Then
				Me.OnPropertyChanging("ItemChildCountItemChildCount", Me._itemChildCountItemChildCount)
				Me._itemChildCountItemChildCount = value
				Me.OnPropertyChanged("ItemChildCountItemChildCount")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="FolderChildCount", Storage:="_folderChildCountId", [ReadOnly]:=true, FieldType:="Lookup", IsLookupId:=true)>  _
	Public Property FolderChildCountId() As System.Nullable(Of Integer)
		Get
			Return Me._folderChildCountId
		End Get
		Set
			If (value <> Me._folderChildCountId) Then
				Me.OnPropertyChanging("FolderChildCountId", Me._folderChildCountId)
				Me._folderChildCountId = value
				Me.OnPropertyChanged("FolderChildCountId")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="FolderChildCount", Storage:="_folderChildCountFolderChildCount", [ReadOnly]:=true, FieldType:="Lookup", IsLookupValue:=true)>  _
	Public Property FolderChildCountFolderChildCount() As String
		Get
			Return Me._folderChildCountFolderChildCount
		End Get
		Set
			If (value <> Me._folderChildCountFolderChildCount) Then
				Me.OnPropertyChanging("FolderChildCountFolderChildCount", Me._folderChildCountFolderChildCount)
				Me._folderChildCountFolderChildCount = value
				Me.OnPropertyChanged("FolderChildCountFolderChildCount")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new meeting, deadline or other event.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Event", Id:="0x0102"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(CalendarEvent))>  _
Partial Public Class [Event]
	Inherits Item
	
	Private _location As String
	
	Protected _startTime As System.Nullable(Of Date)
	
	Private _endTime As System.Nullable(Of Date)
	
	Protected _description As String
	
	Private _allDayEvent As System.Nullable(Of Boolean)
	
	Private _recurrence As System.Nullable(Of Boolean)
	
	Private _workspace As System.Nullable(Of Boolean)
	
	Private _category As System.Nullable(Of Category)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Location", Storage:="_location", FieldType:="Text")>  _
	Public Property Location() As String
		Get
			Return Me._location
		End Get
		Set
			If (value <> Me._location) Then
				Me.OnPropertyChanging("Location", Me._location)
				Me._location = value
				Me.OnPropertyChanged("Location")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="StartDate", Storage:="_startTime", Required:=true, FieldType:="DateTime")>  _
	Public Overridable Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (value <> Me._startTime) Then
				Me.OnPropertyChanging("StartTime", Me._startTime)
				Me._startTime = value
				Me.OnPropertyChanged("StartTime")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="EndDate", Storage:="_endTime", Required:=true, FieldType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._endTime
		End Get
		Set
			If (value <> Me._endTime) Then
				Me.OnPropertyChanging("EndTime", Me._endTime)
				Me._endTime = value
				Me.OnPropertyChanged("EndTime")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Comments", Storage:="_description", FieldType:="Note")>  _
	Public Overridable Property Description() As String
		Get
			Return Me._description
		End Get
		Set
			If (value <> Me._description) Then
				Me.OnPropertyChanging("Description", Me._description)
				Me._description = value
				Me.OnPropertyChanged("Description")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="fAllDayEvent", Storage:="_allDayEvent", FieldType:="AllDayEvent")>  _
	Public Property AllDayEvent() As System.Nullable(Of Boolean)
		Get
			Return Me._allDayEvent
		End Get
		Set
			If (value <> Me._allDayEvent) Then
				Me.OnPropertyChanging("AllDayEvent", Me._allDayEvent)
				Me._allDayEvent = value
				Me.OnPropertyChanged("AllDayEvent")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="fRecurrence", Storage:="_recurrence", FieldType:="Recurrence")>  _
	Public Property Recurrence() As System.Nullable(Of Boolean)
		Get
			Return Me._recurrence
		End Get
		Set
			If (value <> Me._recurrence) Then
				Me.OnPropertyChanging("Recurrence", Me._recurrence)
				Me._recurrence = value
				Me.OnPropertyChanged("Recurrence")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="WorkspaceLink", Storage:="_workspace", FieldType:="CrossProjectLink")>  _
	Public Property Workspace() As System.Nullable(Of Boolean)
		Get
			Return Me._workspace
		End Get
		Set
			If (value <> Me._workspace) Then
				Me.OnPropertyChanging("Workspace", Me._workspace)
				Me._workspace = value
				Me.OnPropertyChanged("Workspace")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Category", Storage:="_category", FieldType:="Choice")>  _
	Public Property Category() As System.Nullable(Of Category)
		Get
			Return Me._category
		End Get
		Set
			If (value <> Me._category) Then
				Me.OnPropertyChanging("Category", Me._category)
				Me._category = value
				Me.OnPropertyChanged("Category")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new document.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Document", Id:="0x0101"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Asset)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(WikiPage))>  _
Partial Public Class Document
	Inherits Item
	
	Private _name As String
	
	Private _documentModifiedBy As String
	
	Private _documentCreatedBy As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="FileLeafRef", Storage:="_name", Required:=true, FieldType:="File")>  _
	Public Property Name() As String
		Get
			Return Me._name
		End Get
		Set
			If (value <> Me._name) Then
				Me.OnPropertyChanging("Name", Me._name)
				Me._name = value
				Me.OnPropertyChanged("Name")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Modified_x0020_By", Storage:="_documentModifiedBy", [ReadOnly]:=true, FieldType:="Text")>  _
	Public Property DocumentModifiedBy() As String
		Get
			Return Me._documentModifiedBy
		End Get
		Set
			If (value <> Me._documentModifiedBy) Then
				Me.OnPropertyChanging("DocumentModifiedBy", Me._documentModifiedBy)
				Me._documentModifiedBy = value
				Me.OnPropertyChanged("DocumentModifiedBy")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Created_x0020_By", Storage:="_documentCreatedBy", [ReadOnly]:=true, FieldType:="Text")>  _
	Public Property DocumentCreatedBy() As String
		Get
			Return Me._documentCreatedBy
		End Get
		Set
			If (value <> Me._documentCreatedBy) Then
				Me.OnPropertyChanging("DocumentCreatedBy", Me._documentCreatedBy)
				Me._documentCreatedBy = value
				Me.OnPropertyChanged("DocumentCreatedBy")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new link to a Web page or other resource.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Link", Id:="0x0105")>  _
Partial Public Class Link
	Inherits Item
	
	Private _uRL As String
	
	Private _comments As String
	
	Private _uRL0 As String
	
	Private _uRL1 As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="URL", Storage:="_uRL", Required:=true, FieldType:="Url")>  _
	Public Property URL() As String
		Get
			Return Me._uRL
		End Get
		Set
			If (value <> Me._uRL) Then
				Me.OnPropertyChanging("URL", Me._uRL)
				Me._uRL = value
				Me.OnPropertyChanged("URL")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="URLwMenu", Storage:="_uRL0", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property URL0() As String
		Get
			Return Me._uRL0
		End Get
		Set
			If (value <> Me._uRL0) Then
				Me.OnPropertyChanging("URL0", Me._uRL0)
				Me._uRL0 = value
				Me.OnPropertyChanged("URL0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="URLNoMenu", Storage:="_uRL1", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property URL1() As String
		Get
			Return Me._uRL1
		End Get
		Set
			If (value <> Me._uRL1) Then
				Me.OnPropertyChanging("URL1", Me._uRL1)
				Me._uRL1 = value
				Me.OnPropertyChanged("URL1")
			End If
		End Set
	End Property
	
	<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
	 Microsoft.SharePoint.Linq.RemovedColumnAttribute()>  _
	Public Overrides Property Title() As String
		Get
			Throw New System.InvalidOperationException("Field Title was removed from content type Link.")
		End Get
		Set
			Throw New System.InvalidOperationException("Field Title was removed from content type Link.")
		End Set
	End Property
End Class

'''<summary>
'''Track a work item that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Task", Id:="0x0108"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(TasksTask)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(WorkflowTasksTask))>  _
Partial Public Class Task
	Inherits Item
	
	Private _complete As System.Nullable(Of Double)
	
	Private _body As String
	
	Private _startDate As System.Nullable(Of Date)
	
	Protected _dueDate As System.Nullable(Of Date)
	
	Private _priority As System.Nullable(Of Priority)
	
	Protected _taskStatus As System.Nullable(Of TaskStatus)
	
	Private _assignedToId As System.Nullable(Of Integer)
	
	Private _assignedTo As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="PercentComplete", Storage:="_complete", FieldType:="Number")>  _
	Public Property Complete() As System.Nullable(Of Double)
		Get
			Return Me._complete
		End Get
		Set
			If (value <> Me._complete) Then
				Me.OnPropertyChanging("Complete", Me._complete)
				Me._complete = value
				Me.OnPropertyChanged("Complete")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Body", Storage:="_body", FieldType:="Note")>  _
	Public Property Body() As String
		Get
			Return Me._body
		End Get
		Set
			If (value <> Me._body) Then
				Me.OnPropertyChanging("Body", Me._body)
				Me._body = value
				Me.OnPropertyChanged("Body")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="StartDate", Storage:="_startDate", FieldType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._startDate
		End Get
		Set
			If (value <> Me._startDate) Then
				Me.OnPropertyChanging("StartDate", Me._startDate)
				Me._startDate = value
				Me.OnPropertyChanged("StartDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="TaskDueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overridable Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Priority", Storage:="_priority", FieldType:="Choice")>  _
	Public Property Priority() As System.Nullable(Of Priority)
		Get
			Return Me._priority
		End Get
		Set
			If (value <> Me._priority) Then
				Me.OnPropertyChanging("Priority", Me._priority)
				Me._priority = value
				Me.OnPropertyChanged("Priority")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="TaskStatus", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overridable Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AssignedTo", Storage:="_assignedToId", FieldType:="User", IsLookupId:=true)>  _
	Public Property AssignedToId() As System.Nullable(Of Integer)
		Get
			Return Me._assignedToId
		End Get
		Set
			If (value <> Me._assignedToId) Then
				Me.OnPropertyChanging("AssignedToId", Me._assignedToId)
				Me._assignedToId = value
				Me.OnPropertyChanged("AssignedToId")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AssignedTo", Storage:="_assignedTo", [ReadOnly]:=true, FieldType:="User", IsLookupValue:=true)>  _
	Public Property AssignedTo() As String
		Get
			Return Me._assignedTo
		End Get
		Set
			If (value <> Me._assignedTo) Then
				Me.OnPropertyChanging("AssignedTo", Me._assignedTo)
				Me._assignedTo = value
				Me.OnPropertyChanged("AssignedTo")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new message.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Message", Id:="0x0107")>  _
Partial Public Class Message
	Inherits Item
	
	Private _discussionSubject As String
	
	Private _version0 As String
	
	Private _body As String
	
	Private _reply As String
	
	Private _post As String
	
	Private _threading As String
	
	Private _postedBy As String
	
	Private _eMailSender As String
	
	Private _modifiedById As System.Nullable(Of Integer)
	
	Private _modifiedByNameWithPicture As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DiscussionTitle", Storage:="_discussionSubject", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property DiscussionSubject() As String
		Get
			Return Me._discussionSubject
		End Get
		Set
			If (value <> Me._discussionSubject) Then
				Me.OnPropertyChanging("DiscussionSubject", Me._discussionSubject)
				Me._discussionSubject = value
				Me.OnPropertyChanged("DiscussionSubject")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_UIVersionString", Storage:="_version0", [ReadOnly]:=true, FieldType:="Text")>  _
	Public Property Version0() As String
		Get
			Return Me._version0
		End Get
		Set
			If (value <> Me._version0) Then
				Me.OnPropertyChanging("Version0", Me._version0)
				Me._version0 = value
				Me.OnPropertyChanged("Version0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Body", Storage:="_body", FieldType:="Note")>  _
	Public Property Body() As String
		Get
			Return Me._body
		End Get
		Set
			If (value <> Me._body) Then
				Me.OnPropertyChanging("Body", Me._body)
				Me._body = value
				Me.OnPropertyChanged("Body")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ReplyNoGif", Storage:="_reply", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Reply() As String
		Get
			Return Me._reply
		End Get
		Set
			If (value <> Me._reply) Then
				Me.OnPropertyChanging("Reply", Me._reply)
				Me._reply = value
				Me.OnPropertyChanged("Reply")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="BodyAndMore", Storage:="_post", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Post() As String
		Get
			Return Me._post
		End Get
		Set
			If (value <> Me._post) Then
				Me.OnPropertyChanging("Post", Me._post)
				Me._post = value
				Me.OnPropertyChanged("Post")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Threading", Storage:="_threading", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Threading() As String
		Get
			Return Me._threading
		End Get
		Set
			If (value <> Me._threading) Then
				Me.OnPropertyChanging("Threading", Me._threading)
				Me._threading = value
				Me.OnPropertyChanged("Threading")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="PersonViewMinimal", Storage:="_postedBy", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property PostedBy() As String
		Get
			Return Me._postedBy
		End Get
		Set
			If (value <> Me._postedBy) Then
				Me.OnPropertyChanging("PostedBy", Me._postedBy)
				Me._postedBy = value
				Me.OnPropertyChanged("PostedBy")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="EmailSender", Storage:="_eMailSender", FieldType:="Note")>  _
	Public Property EMailSender() As String
		Get
			Return Me._eMailSender
		End Get
		Set
			If (value <> Me._eMailSender) Then
				Me.OnPropertyChanging("EMailSender", Me._eMailSender)
				Me._eMailSender = value
				Me.OnPropertyChanged("EMailSender")
			End If
		End Set
	End Property
	
	<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
	 Microsoft.SharePoint.Linq.RemovedColumnAttribute()>  _
	Public Overrides Property Title() As String
		Get
			Throw New System.InvalidOperationException("Field Title was removed from content type Message.")
		End Get
		Set
			Throw New System.InvalidOperationException("Field Title was removed from content type Message.")
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MyEditor", Storage:="_modifiedById", [ReadOnly]:=true, FieldType:="User", IsLookupId:=true)>  _
	Public Property ModifiedById() As System.Nullable(Of Integer)
		Get
			Return Me._modifiedById
		End Get
		Set
			If (value <> Me._modifiedById) Then
				Me.OnPropertyChanging("ModifiedById", Me._modifiedById)
				Me._modifiedById = value
				Me.OnPropertyChanged("ModifiedById")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MyEditor", Storage:="_modifiedByNameWithPicture", [ReadOnly]:=true, FieldType:="User", IsLookupValue:=true)>  _
	Public Property ModifiedByNameWithPicture() As String
		Get
			Return Me._modifiedByNameWithPicture
		End Get
		Set
			If (value <> Me._modifiedByNameWithPicture) Then
				Me.OnPropertyChanging("ModifiedByNameWithPicture", Me._modifiedByNameWithPicture)
				Me._modifiedByNameWithPicture = value
				Me.OnPropertyChanged("ModifiedByNameWithPicture")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new wiki page.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Wiki Page", Id:="0x010108")>  _
Partial Public Class WikiPage
	Inherits Document
	
	Private _wikiContent As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="WikiField", Storage:="_wikiContent", FieldType:="Note")>  _
	Public Property WikiContent() As String
		Get
			Return Me._wikiContent
		End Get
		Set
			If (value <> Me._wikiContent) Then
				Me.OnPropertyChanging("WikiContent", Me._wikiContent)
				Me._wikiContent = value
				Me.OnPropertyChanged("WikiContent")
			End If
		End Set
	End Property
	
	<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
	 Microsoft.SharePoint.Linq.RemovedColumnAttribute()>  _
	Public Overrides Property Title() As String
		Get
			Throw New System.InvalidOperationException("Field Title was removed from content type Wiki Page.")
		End Get
		Set
			Throw New System.InvalidOperationException("Field Title was removed from content type Wiki Page.")
		End Set
	End Property
End Class

'''<summary>
'''Group and describe related tasks that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Summary Task", Id:="0x012004"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(TasksSummaryTask)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(WorkflowTasksSummaryTask))>  _
Partial Public Class SummaryTask
	Inherits Folder
	
	Private _complete As System.Nullable(Of Double)
	
	Private _body As String
	
	Private _startDate As System.Nullable(Of Date)
	
	Protected _dueDate As System.Nullable(Of Date)
	
	Private _priority As System.Nullable(Of Priority)
	
	Protected _taskStatus As System.Nullable(Of TaskStatus)
	
	Private _assignedToId As System.Nullable(Of Integer)
	
	Private _assignedTo As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="PercentComplete", Storage:="_complete", FieldType:="Number")>  _
	Public Property Complete() As System.Nullable(Of Double)
		Get
			Return Me._complete
		End Get
		Set
			If (value <> Me._complete) Then
				Me.OnPropertyChanging("Complete", Me._complete)
				Me._complete = value
				Me.OnPropertyChanged("Complete")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Body", Storage:="_body", FieldType:="Note")>  _
	Public Property Body() As String
		Get
			Return Me._body
		End Get
		Set
			If (value <> Me._body) Then
				Me.OnPropertyChanging("Body", Me._body)
				Me._body = value
				Me.OnPropertyChanged("Body")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="StartDate", Storage:="_startDate", FieldType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._startDate
		End Get
		Set
			If (value <> Me._startDate) Then
				Me.OnPropertyChanging("StartDate", Me._startDate)
				Me._startDate = value
				Me.OnPropertyChanged("StartDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="TaskDueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overridable Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Priority", Storage:="_priority", FieldType:="Choice")>  _
	Public Property Priority() As System.Nullable(Of Priority)
		Get
			Return Me._priority
		End Get
		Set
			If (value <> Me._priority) Then
				Me.OnPropertyChanging("Priority", Me._priority)
				Me._priority = value
				Me.OnPropertyChanged("Priority")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="TaskStatus", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overridable Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AssignedTo", Storage:="_assignedToId", FieldType:="User", IsLookupId:=true)>  _
	Public Property AssignedToId() As System.Nullable(Of Integer)
		Get
			Return Me._assignedToId
		End Get
		Set
			If (value <> Me._assignedToId) Then
				Me.OnPropertyChanging("AssignedToId", Me._assignedToId)
				Me._assignedToId = value
				Me.OnPropertyChanged("AssignedToId")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AssignedTo", Storage:="_assignedTo", [ReadOnly]:=true, FieldType:="User", IsLookupValue:=true)>  _
	Public Property AssignedTo() As String
		Get
			Return Me._assignedTo
		End Get
		Set
			If (value <> Me._assignedTo) Then
				Me.OnPropertyChanging("AssignedTo", Me._assignedTo)
				Me._assignedTo = value
				Me.OnPropertyChanged("AssignedTo")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new discussion topic.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Discussion", Id:="0x012002")>  _
Partial Public Class Discussion
	Inherits Folder
	
	Private _discussionSubject As String
	
	Private _version0 As String
	
	Private _body As String
	
	Private _reply As String
	
	Private _post As String
	
	Private _threading As String
	
	Private _postedBy As String
	
	Private _lastUpdated As System.Nullable(Of Date)
	
	Private _eMailSender As String
	
	Private _modifiedById As System.Nullable(Of Integer)
	
	Private _modifiedByNameWithPicture As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Title", Storage:="_title", Required:=true, FieldType:="Text")>  _
	Public Overrides Property Title() As String
		Get
			Return Me._title
		End Get
		Set
			If (value <> Me._title) Then
				Me.OnPropertyChanging("Title", Me._title)
				Me._title = value
				Me.OnPropertyChanged("Title")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DiscussionTitle", Storage:="_discussionSubject", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property DiscussionSubject() As String
		Get
			Return Me._discussionSubject
		End Get
		Set
			If (value <> Me._discussionSubject) Then
				Me.OnPropertyChanging("DiscussionSubject", Me._discussionSubject)
				Me._discussionSubject = value
				Me.OnPropertyChanged("DiscussionSubject")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_UIVersionString", Storage:="_version0", [ReadOnly]:=true, FieldType:="Text")>  _
	Public Property Version0() As String
		Get
			Return Me._version0
		End Get
		Set
			If (value <> Me._version0) Then
				Me.OnPropertyChanging("Version0", Me._version0)
				Me._version0 = value
				Me.OnPropertyChanged("Version0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Body", Storage:="_body", FieldType:="Note")>  _
	Public Property Body() As String
		Get
			Return Me._body
		End Get
		Set
			If (value <> Me._body) Then
				Me.OnPropertyChanging("Body", Me._body)
				Me._body = value
				Me.OnPropertyChanged("Body")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ReplyNoGif", Storage:="_reply", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Reply() As String
		Get
			Return Me._reply
		End Get
		Set
			If (value <> Me._reply) Then
				Me.OnPropertyChanging("Reply", Me._reply)
				Me._reply = value
				Me.OnPropertyChanged("Reply")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="BodyAndMore", Storage:="_post", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Post() As String
		Get
			Return Me._post
		End Get
		Set
			If (value <> Me._post) Then
				Me.OnPropertyChanging("Post", Me._post)
				Me._post = value
				Me.OnPropertyChanged("Post")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Threading", Storage:="_threading", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Threading() As String
		Get
			Return Me._threading
		End Get
		Set
			If (value <> Me._threading) Then
				Me.OnPropertyChanging("Threading", Me._threading)
				Me._threading = value
				Me.OnPropertyChanged("Threading")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="PersonViewMinimal", Storage:="_postedBy", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property PostedBy() As String
		Get
			Return Me._postedBy
		End Get
		Set
			If (value <> Me._postedBy) Then
				Me.OnPropertyChanging("PostedBy", Me._postedBy)
				Me._postedBy = value
				Me.OnPropertyChanged("PostedBy")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DiscussionLastUpdated", Storage:="_lastUpdated", [ReadOnly]:=true, FieldType:="DateTime")>  _
	Public Property LastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._lastUpdated
		End Get
		Set
			If (value <> Me._lastUpdated) Then
				Me.OnPropertyChanging("LastUpdated", Me._lastUpdated)
				Me._lastUpdated = value
				Me.OnPropertyChanged("LastUpdated")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="EmailSender", Storage:="_eMailSender", FieldType:="Note")>  _
	Public Property EMailSender() As String
		Get
			Return Me._eMailSender
		End Get
		Set
			If (value <> Me._eMailSender) Then
				Me.OnPropertyChanging("EMailSender", Me._eMailSender)
				Me._eMailSender = value
				Me.OnPropertyChanged("EMailSender")
			End If
		End Set
	End Property
	
	<System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never),  _
	 Microsoft.SharePoint.Linq.RemovedColumnAttribute()>  _
	Public Overrides Property Name() As String
		Get
			Throw New System.InvalidOperationException("Field FileLeafRef was removed from content type Discussion.")
		End Get
		Set
			Throw New System.InvalidOperationException("Field FileLeafRef was removed from content type Discussion.")
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MyEditor", Storage:="_modifiedById", [ReadOnly]:=true, FieldType:="User", IsLookupId:=true)>  _
	Public Property ModifiedById() As System.Nullable(Of Integer)
		Get
			Return Me._modifiedById
		End Get
		Set
			If (value <> Me._modifiedById) Then
				Me.OnPropertyChanging("ModifiedById", Me._modifiedById)
				Me._modifiedById = value
				Me.OnPropertyChanged("ModifiedById")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MyEditor", Storage:="_modifiedByNameWithPicture", [ReadOnly]:=true, FieldType:="User", IsLookupValue:=true)>  _
	Public Property ModifiedByNameWithPicture() As String
		Get
			Return Me._modifiedByNameWithPicture
		End Get
		Set
			If (value <> Me._modifiedByNameWithPicture) Then
				Me.OnPropertyChanging("ModifiedByNameWithPicture", Me._modifiedByNameWithPicture)
				Me._modifiedByNameWithPicture = value
				Me.OnPropertyChanged("ModifiedByNameWithPicture")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Bug item content type.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Bug Item", Id:="0x010089E3E6DB8C9B4B3FBB980447E313CE94")>  _
Partial Public Class BugItem
	Inherits Item
	
	Private _description As String
	
	Private _project As String
	
	Private _assignedTo As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="BugDescription", Storage:="_description", FieldType:="Note")>  _
	Public Property Description() As String
		Get
			Return Me._description
		End Get
		Set
			If (value <> Me._description) Then
				Me.OnPropertyChanging("Description", Me._description)
				Me._description = value
				Me.OnPropertyChanged("Description")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="BugProject", Storage:="_project", FieldType:="Text")>  _
	Public Property Project() As String
		Get
			Return Me._project
		End Get
		Set
			If (value <> Me._project) Then
				Me.OnPropertyChanging("Project", Me._project)
				Me._project = value
				Me.OnPropertyChanged("Project")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="BugAssignedTo", Storage:="_assignedTo", FieldType:="Text")>  _
	Public Property AssignedTo() As String
		Get
			Return Me._assignedTo
		End Get
		Set
			If (value <> Me._assignedTo) Then
				Me.OnPropertyChanging("AssignedTo", Me._assignedTo)
				Me._assignedTo = value
				Me.OnPropertyChanged("AssignedTo")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new list item.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Item", Id:="0x01", List:="Content and Structure Reports")>  _
Partial Public Class ContentAndStructureReportsItem
	Inherits Item
	
	Private _resourceId As String
	
	Private _resourceId0 As String
	
	Private _cAMLListType As String
	
	Private _cAMLQuery As String
	
	Private _reportDescription As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_x0024_Resources_x003a_cmscore_x", Storage:="_resourceId", FieldType:="Text")>  _
	Public Property ResourceId() As String
		Get
			Return Me._resourceId
		End Get
		Set
			If (value <> Me._resourceId) Then
				Me.OnPropertyChanging("ResourceId", Me._resourceId)
				Me._resourceId = value
				Me.OnPropertyChanged("ResourceId")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_x0024_Resources_x003a_cmscore_x0", Storage:="_resourceId0", FieldType:="Text")>  _
	Public Property ResourceId0() As String
		Get
			Return Me._resourceId0
		End Get
		Set
			If (value <> Me._resourceId0) Then
				Me.OnPropertyChanging("ResourceId0", Me._resourceId0)
				Me._resourceId0 = value
				Me.OnPropertyChanged("ResourceId0")
			End If
		End Set
	End Property
	
	'''<summary>
	'''Type the name of the list template for the CAML list type, or leave blank to search document library template
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_x0024_Resources_x003a_cmscore_x1", Storage:="_cAMLListType", FieldType:="Text")>  _
	Public Property CAMLListType() As String
		Get
			Return Me._cAMLListType
		End Get
		Set
			If (value <> Me._cAMLListType) Then
				Me.OnPropertyChanging("CAMLListType", Me._cAMLListType)
				Me._cAMLListType = value
				Me.OnPropertyChanged("CAMLListType")
			End If
		End Set
	End Property
	
	'''<summary>
	'''Type the CAML markup for the report query
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_x0024_Resources_x003a_cmscore_x2", Storage:="_cAMLQuery", Required:=true, FieldType:="Text")>  _
	Public Property CAMLQuery() As String
		Get
			Return Me._cAMLQuery
		End Get
		Set
			If (value <> Me._cAMLQuery) Then
				Me.OnPropertyChanging("CAMLQuery", Me._cAMLQuery)
				Me._cAMLQuery = value
				Me.OnPropertyChanged("CAMLQuery")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Report_x0020_Description", Storage:="_reportDescription", FieldType:="Note")>  _
	Public Property ReportDescription() As String
		Get
			Return Me._reportDescription
		End Get
		Set
			If (value <> Me._reportDescription) Then
				Me.OnPropertyChanging("ReportDescription", Me._reportDescription)
				Me._reportDescription = value
				Me.OnPropertyChanged("ReportDescription")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new list item.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Item", Id:="0x01", List:="Employees")>  _
Partial Public Class EmployeesItem
	Inherits Item
	
	Private _jobTitle As String
	
	Private _team As String
	
	Private _contributionInMilestones As System.Nullable(Of Double)
	
	Private _project As Microsoft.SharePoint.Linq.EntityRef(Of ProjectsItem)
	
	Private _projectsItem As Microsoft.SharePoint.Linq.EntitySet(Of ProjectsItem)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._project = New Microsoft.SharePoint.Linq.EntityRef(Of ProjectsItem)
		AddHandler Me._project.OnSync, AddressOf Me.OnProjectSync
		AddHandler Me._project.OnChanged, AddressOf Me.OnProjectChanged
		AddHandler Me._project.OnChanging, AddressOf Me.OnProjectChanging
		Me._projectsItem = New Microsoft.SharePoint.Linq.EntitySet(Of ProjectsItem)
		AddHandler Me._projectsItem.OnSync, AddressOf Me.OnProjectsItemSync
		AddHandler Me._projectsItem.OnChanged, AddressOf Me.OnProjectsItemChanged
		AddHandler Me._projectsItem.OnChanging, AddressOf Me.OnProjectsItemChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="JobTitle", Storage:="_jobTitle", FieldType:="Text")>  _
	Public Property JobTitle() As String
		Get
			Return Me._jobTitle
		End Get
		Set
			If (value <> Me._jobTitle) Then
				Me.OnPropertyChanging("JobTitle", Me._jobTitle)
				Me._jobTitle = value
				Me.OnPropertyChanged("JobTitle")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Team", Storage:="_team", FieldType:="Text")>  _
	Public Property Team() As String
		Get
			Return Me._team
		End Get
		Set
			If (value <> Me._team) Then
				Me.OnPropertyChanging("Team", Me._team)
				Me._team = value
				Me.OnPropertyChanged("Team")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Contribution_x0020__x0028_in_x00", Storage:="_contributionInMilestones", FieldType:="Number")>  _
	Public Property ContributionInMilestones() As System.Nullable(Of Double)
		Get
			Return Me._contributionInMilestones
		End Get
		Set
			If (value <> Me._contributionInMilestones) Then
				Me.OnPropertyChanging("ContributionInMilestones", Me._contributionInMilestones)
				Me._contributionInMilestones = value
				Me.OnPropertyChanged("ContributionInMilestones")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Project", Storage:="_project", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.[Single], List:="Projects")>  _
	Public Property Project() As ProjectsItem
		Get
			Return Me._project.GetEntity
		End Get
		Set
			Me._project.SetEntity(value)
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Primary_x0020_Contact", Storage:="_projectsItem", [ReadOnly]:=true, MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Backward, List:="Projects")>  _
	Public Property ProjectsItem() As Microsoft.SharePoint.Linq.EntitySet(Of ProjectsItem)
		Get
			Return Me._projectsItem
		End Get
		Set
			Me._projectsItem.Assign(value)
		End Set
	End Property
	
	Private Sub OnProjectChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("Project", Me._project.Clone)
	End Sub
	
	Private Sub OnProjectChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("Project")
	End Sub
	
	Private Sub OnProjectSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of ProjectsItem))
		If (Microsoft.SharePoint.Linq.AssociationChangedState.Added = e.State) Then
			e.Item.EmployeesItem.Add(Me)
		Else
			e.Item.EmployeesItem.Remove(Me)
		End If
	End Sub
	
	Private Sub OnProjectsItemChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("ProjectsItem", Me._projectsItem.Clone)
	End Sub
	
	Private Sub OnProjectsItemChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("ProjectsItem")
	End Sub
	
	Private Sub OnProjectsItemSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of ProjectsItem))
		If (Microsoft.SharePoint.Linq.AssociationChangedState.Added = e.State) Then
			e.Item.PrimaryContact = Me
		Else
			e.Item.PrimaryContact = Nothing
		End If
	End Sub
End Class

'''<summary>
'''Create a new list item.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Item", Id:="0x01", List:="Projects")>  _
Partial Public Class ProjectsItem
	Inherits Item
	
	Private _description As String
	
	Private _dueDate As System.Nullable(Of Date)
	
	Private _employeesItem As Microsoft.SharePoint.Linq.EntitySet(Of EmployeesItem)
	
	Private _primaryContact As Microsoft.SharePoint.Linq.EntityRef(Of EmployeesItem)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._employeesItem = New Microsoft.SharePoint.Linq.EntitySet(Of EmployeesItem)
		AddHandler Me._employeesItem.OnSync, AddressOf Me.OnEmployeesItemSync
		AddHandler Me._employeesItem.OnChanged, AddressOf Me.OnEmployeesItemChanged
		AddHandler Me._employeesItem.OnChanging, AddressOf Me.OnEmployeesItemChanging
		Me._primaryContact = New Microsoft.SharePoint.Linq.EntityRef(Of EmployeesItem)
		AddHandler Me._primaryContact.OnSync, AddressOf Me.OnPrimaryContactSync
		AddHandler Me._primaryContact.OnChanged, AddressOf Me.OnPrimaryContactChanged
		AddHandler Me._primaryContact.OnChanging, AddressOf Me.OnPrimaryContactChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Description", Storage:="_description", FieldType:="Text")>  _
	Public Property Description() As String
		Get
			Return Me._description
		End Get
		Set
			If (value <> Me._description) Then
				Me.OnPropertyChanging("Description", Me._description)
				Me._description = value
				Me.OnPropertyChanged("Description")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Due_x0020_Date", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Project", Storage:="_employeesItem", [ReadOnly]:=true, MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Backward, List:="Employees")>  _
	Public Property EmployeesItem() As Microsoft.SharePoint.Linq.EntitySet(Of EmployeesItem)
		Get
			Return Me._employeesItem
		End Get
		Set
			Me._employeesItem.Assign(value)
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Primary_x0020_Contact", Storage:="_primaryContact", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.[Single], List:="Employees")>  _
	Public Property PrimaryContact() As EmployeesItem
		Get
			Return Me._primaryContact.GetEntity
		End Get
		Set
			Me._primaryContact.SetEntity(value)
		End Set
	End Property
	
	Private Sub OnEmployeesItemChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("EmployeesItem", Me._employeesItem.Clone)
	End Sub
	
	Private Sub OnEmployeesItemChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("EmployeesItem")
	End Sub
	
	Private Sub OnEmployeesItemSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of EmployeesItem))
		If (Microsoft.SharePoint.Linq.AssociationChangedState.Added = e.State) Then
			e.Item.Project = Me
		Else
			e.Item.Project = Nothing
		End If
	End Sub
	
	Private Sub OnPrimaryContactChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("PrimaryContact", Me._primaryContact.Clone)
	End Sub
	
	Private Sub OnPrimaryContactChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("PrimaryContact")
	End Sub
	
	Private Sub OnPrimaryContactSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of EmployeesItem))
		If (Microsoft.SharePoint.Linq.AssociationChangedState.Added = e.State) Then
			e.Item.ProjectsItem.Add(Me)
		Else
			e.Item.ProjectsItem.Remove(Me)
		End If
	End Sub
End Class

<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Reusable HTML", Id:="0x01002CF74A4DAE39480396EEA7A4BA2BE5FB")>  _
Partial Public Class ReusableHTML
	Inherits Item
	
	Private _title0 As String
	
	Private _comments As String
	
	Private _automaticUpdate As System.Nullable(Of Boolean)
	
	Private _showInDropDownMenu As System.Nullable(Of Boolean)
	
	Private _contentCategory As System.Nullable(Of ContentCategory)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="LinkTitle", Storage:="_title0", [ReadOnly]:=true, Required:=true, FieldType:="Computed")>  _
	Public Property Title0() As String
		Get
			Return Me._title0
		End Get
		Set
			If (value <> Me._title0) Then
				Me.OnPropertyChanging("Title0", Me._title0)
				Me._title0 = value
				Me.OnPropertyChanged("Title0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	'''<summary>
	'''If this option is selected, the content of this list item will be inserted into web pages as a read-only reference. New versions of this item will automatically appear in the web pages. If the option is not selected, the content of this list item will be inserted into web pages as a copy that page authors can then modify. New versions of this item will not appear in the web pages. Any change to this setting will not affect existing web pages that are using this item.
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AutomaticUpdate", Storage:="_automaticUpdate", FieldType:="Boolean")>  _
	Public Property AutomaticUpdate() As System.Nullable(Of Boolean)
		Get
			Return Me._automaticUpdate
		End Get
		Set
			If (value <> Me._automaticUpdate) Then
				Me.OnPropertyChanging("AutomaticUpdate", Me._automaticUpdate)
				Me._automaticUpdate = value
				Me.OnPropertyChanged("AutomaticUpdate")
			End If
		End Set
	End Property
	
	'''<summary>
	'''Select this option if you want this reusable content item to appear in a drop-down menu available during page editing. This will offer authors a quick way to add this item to a page.
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ShowInRibbon", Storage:="_showInDropDownMenu", FieldType:="Boolean")>  _
	Public Property ShowInDropDownMenu() As System.Nullable(Of Boolean)
		Get
			Return Me._showInDropDownMenu
		End Get
		Set
			If (value <> Me._showInDropDownMenu) Then
				Me.OnPropertyChanging("ShowInDropDownMenu", Me._showInDropDownMenu)
				Me._showInDropDownMenu = value
				Me.OnPropertyChanged("ShowInDropDownMenu")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ContentCategory", Storage:="_contentCategory", FieldType:="Choice")>  _
	Public Property ContentCategory() As System.Nullable(Of ContentCategory)
		Get
			Return Me._contentCategory
		End Get
		Set
			If (value <> Me._contentCategory) Then
				Me.OnPropertyChanging("ContentCategory", Me._contentCategory)
				Me._contentCategory = value
				Me.OnPropertyChanged("ContentCategory")
			End If
		End Set
	End Property
End Class

<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Reusable Text", Id:="0x01004D5A79BAFA4A4576B79C56FF3D0D662D")>  _
Partial Public Class ReusableText
	Inherits Item
	
	Private _title0 As String
	
	Private _comments As String
	
	Private _automaticUpdate As System.Nullable(Of Boolean)
	
	Private _showInDropDownMenu As System.Nullable(Of Boolean)
	
	Private _reusableText0 As String
	
	Private _contentCategory As System.Nullable(Of ContentCategory)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="LinkTitle", Storage:="_title0", [ReadOnly]:=true, FieldType:="Computed")>  _
	Public Property Title0() As String
		Get
			Return Me._title0
		End Get
		Set
			If (value <> Me._title0) Then
				Me.OnPropertyChanging("Title0", Me._title0)
				Me._title0 = value
				Me.OnPropertyChanged("Title0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	'''<summary>
	'''If this option is selected, the content of this list item will be inserted into web pages as a read-only reference. New versions of this item will automatically appear in the web pages. If the option is not selected, the content of this list item will be inserted into web pages as a copy that page authors can then modify. New versions of this item will not appear in the web pages. Any change to this setting will not affect existing web pages that are using this item.
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AutomaticUpdate", Storage:="_automaticUpdate", FieldType:="Boolean")>  _
	Public Property AutomaticUpdate() As System.Nullable(Of Boolean)
		Get
			Return Me._automaticUpdate
		End Get
		Set
			If (value <> Me._automaticUpdate) Then
				Me.OnPropertyChanging("AutomaticUpdate", Me._automaticUpdate)
				Me._automaticUpdate = value
				Me.OnPropertyChanged("AutomaticUpdate")
			End If
		End Set
	End Property
	
	'''<summary>
	'''Select this option if you want this reusable content item to appear in a drop-down menu available during page editing. This will offer authors a quick way to add this item to a page.
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ShowInRibbon", Storage:="_showInDropDownMenu", FieldType:="Boolean")>  _
	Public Property ShowInDropDownMenu() As System.Nullable(Of Boolean)
		Get
			Return Me._showInDropDownMenu
		End Get
		Set
			If (value <> Me._showInDropDownMenu) Then
				Me.OnPropertyChanging("ShowInDropDownMenu", Me._showInDropDownMenu)
				Me._showInDropDownMenu = value
				Me.OnPropertyChanged("ShowInDropDownMenu")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ReusableText", Storage:="_reusableText0", FieldType:="Note")>  _
	Public Property ReusableText0() As String
		Get
			Return Me._reusableText0
		End Get
		Set
			If (value <> Me._reusableText0) Then
				Me.OnPropertyChanging("ReusableText0", Me._reusableText0)
				Me._reusableText0 = value
				Me.OnPropertyChanged("ReusableText0")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ContentCategory", Storage:="_contentCategory", FieldType:="Choice")>  _
	Public Property ContentCategory() As System.Nullable(Of ContentCategory)
		Get
			Return Me._contentCategory
		End Get
		Set
			If (value <> Me._contentCategory) Then
				Me.OnPropertyChanging("ContentCategory", Me._contentCategory)
				Me._contentCategory = value
				Me.OnPropertyChanged("ContentCategory")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Create a new meeting, deadline or other event.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Event", Id:="0x0102", List:="Calendar")>  _
Partial Public Class CalendarEvent
	Inherits [Event]
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="EventDate", Storage:="_startTime", Required:=true, FieldType:="DateTime")>  _
	Public Overrides Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._startTime
		End Get
		Set
			If (value <> Me._startTime) Then
				Me.OnPropertyChanging("StartTime", Me._startTime)
				Me._startTime = value
				Me.OnPropertyChanged("StartTime")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Description", Storage:="_description", FieldType:="Note")>  _
	Public Overrides Property Description() As String
		Get
			Return Me._description
		End Get
		Set
			If (value <> Me._description) Then
				Me.OnPropertyChanging("Description", Me._description)
				Me._description = value
				Me.OnPropertyChanged("Description")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Upload an asset.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Asset", Id:="0x0101009148F5A04DDD49CBA7127AADA5FB792B"),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Image)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Audio)),  _
 Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type:=GetType(Video))>  _
Partial Public Class Asset
	Inherits Document
	
	Private _preview As String
	
	Private _keywords As String
	
	Private _thumbnailPreview As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="PreviewOnForm", Storage:="_preview", FieldType:="Computed")>  _
	Public Property Preview() As String
		Get
			Return Me._preview
		End Get
		Set
			If (value <> Me._preview) Then
				Me.OnPropertyChanging("Preview", Me._preview)
				Me._preview = value
				Me.OnPropertyChanged("Preview")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Keywords", Storage:="_keywords", FieldType:="Note")>  _
	Public Property Keywords() As String
		Get
			Return Me._keywords
		End Get
		Set
			If (value <> Me._keywords) Then
				Me.OnPropertyChanging("Keywords", Me._keywords)
				Me._keywords = value
				Me.OnPropertyChanged("Keywords")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ThumbnailOnForm", Storage:="_thumbnailPreview", FieldType:="Computed")>  _
	Public Property ThumbnailPreview() As String
		Get
			Return Me._thumbnailPreview
		End Get
		Set
			If (value <> Me._thumbnailPreview) Then
				Me.OnPropertyChanging("ThumbnailPreview", Me._thumbnailPreview)
				Me._thumbnailPreview = value
				Me.OnPropertyChanged("ThumbnailPreview")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Track a work item that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Task", Id:="0x0108", List:="Tasks")>  _
Partial Public Class TasksTask
	Inherits Task
	
	Private _predecessors As Microsoft.SharePoint.Linq.EntitySet(Of Item)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._predecessors = New Microsoft.SharePoint.Linq.EntitySet(Of Item)
		AddHandler Me._predecessors.OnSync, AddressOf Me.OnPredecessorsSync
		AddHandler Me._predecessors.OnChanged, AddressOf Me.OnPredecessorsChanged
		AddHandler Me._predecessors.OnChanging, AddressOf Me.OnPredecessorsChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overrides Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Status", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overrides Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Predecessors", Storage:="_predecessors", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Multi, List:="Tasks")>  _
	Public Property Predecessors() As Microsoft.SharePoint.Linq.EntitySet(Of Item)
		Get
			Return Me._predecessors
		End Get
		Set
			Me._predecessors.Assign(value)
		End Set
	End Property
	
	Private Sub OnPredecessorsChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("Predecessors", Me._predecessors.Clone)
	End Sub
	
	Private Sub OnPredecessorsChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("Predecessors")
	End Sub
	
	Private Sub OnPredecessorsSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of Item))
	End Sub
End Class

'''<summary>
'''Track a work item that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Task", Id:="0x0108", List:="Workflow Tasks")>  _
Partial Public Class WorkflowTasksTask
	Inherits Task
	
	Private _predecessors As Microsoft.SharePoint.Linq.EntitySet(Of Item)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._predecessors = New Microsoft.SharePoint.Linq.EntitySet(Of Item)
		AddHandler Me._predecessors.OnSync, AddressOf Me.OnPredecessorsSync
		AddHandler Me._predecessors.OnChanged, AddressOf Me.OnPredecessorsChanged
		AddHandler Me._predecessors.OnChanging, AddressOf Me.OnPredecessorsChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overrides Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Status", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overrides Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Predecessors", Storage:="_predecessors", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Multi, List:="Workflow Tasks")>  _
	Public Property Predecessors() As Microsoft.SharePoint.Linq.EntitySet(Of Item)
		Get
			Return Me._predecessors
		End Get
		Set
			Me._predecessors.Assign(value)
		End Set
	End Property
	
	Private Sub OnPredecessorsChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("Predecessors", Me._predecessors.Clone)
	End Sub
	
	Private Sub OnPredecessorsChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("Predecessors")
	End Sub
	
	Private Sub OnPredecessorsSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of Item))
	End Sub
End Class

'''<summary>
'''Group and describe related tasks that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Summary Task", Id:="0x012004", List:="Tasks")>  _
Partial Public Class TasksSummaryTask
	Inherits SummaryTask
	
	Private _predecessors As Microsoft.SharePoint.Linq.EntitySet(Of Item)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._predecessors = New Microsoft.SharePoint.Linq.EntitySet(Of Item)
		AddHandler Me._predecessors.OnSync, AddressOf Me.OnPredecessorsSync
		AddHandler Me._predecessors.OnChanged, AddressOf Me.OnPredecessorsChanged
		AddHandler Me._predecessors.OnChanging, AddressOf Me.OnPredecessorsChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overrides Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Status", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overrides Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Predecessors", Storage:="_predecessors", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Multi, List:="Tasks")>  _
	Public Property Predecessors() As Microsoft.SharePoint.Linq.EntitySet(Of Item)
		Get
			Return Me._predecessors
		End Get
		Set
			Me._predecessors.Assign(value)
		End Set
	End Property
	
	Private Sub OnPredecessorsChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("Predecessors", Me._predecessors.Clone)
	End Sub
	
	Private Sub OnPredecessorsChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("Predecessors")
	End Sub
	
	Private Sub OnPredecessorsSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of Item))
	End Sub
End Class

'''<summary>
'''Group and describe related tasks that you or your team needs to complete.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Summary Task", Id:="0x012004", List:="Workflow Tasks")>  _
Partial Public Class WorkflowTasksSummaryTask
	Inherits SummaryTask
	
	Private _predecessors As Microsoft.SharePoint.Linq.EntitySet(Of Item)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me._predecessors = New Microsoft.SharePoint.Linq.EntitySet(Of Item)
		AddHandler Me._predecessors.OnSync, AddressOf Me.OnPredecessorsSync
		AddHandler Me._predecessors.OnChanged, AddressOf Me.OnPredecessorsChanged
		AddHandler Me._predecessors.OnChanging, AddressOf Me.OnPredecessorsChanging
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="DueDate", Storage:="_dueDate", FieldType:="DateTime")>  _
	Public Overrides Property DueDate() As System.Nullable(Of Date)
		Get
			Return Me._dueDate
		End Get
		Set
			If (value <> Me._dueDate) Then
				Me.OnPropertyChanging("DueDate", Me._dueDate)
				Me._dueDate = value
				Me.OnPropertyChanged("DueDate")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="Status", Storage:="_taskStatus", FieldType:="Choice")>  _
	Public Overrides Property TaskStatus() As System.Nullable(Of TaskStatus)
		Get
			Return Me._taskStatus
		End Get
		Set
			If (value <> Me._taskStatus) Then
				Me.OnPropertyChanging("TaskStatus", Me._taskStatus)
				Me._taskStatus = value
				Me.OnPropertyChanged("TaskStatus")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.AssociationAttribute(Name:="Predecessors", Storage:="_predecessors", MultivalueType:=Microsoft.SharePoint.Linq.AssociationType.Multi, List:="Workflow Tasks")>  _
	Public Property Predecessors() As Microsoft.SharePoint.Linq.EntitySet(Of Item)
		Get
			Return Me._predecessors
		End Get
		Set
			Me._predecessors.Assign(value)
		End Set
	End Property
	
	Private Sub OnPredecessorsChanging(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanging("Predecessors", Me._predecessors.Clone)
	End Sub
	
	Private Sub OnPredecessorsChanged(ByVal sender As Object, ByVal e As System.EventArgs)
		Me.OnPropertyChanged("Predecessors")
	End Sub
	
	Private Sub OnPredecessorsSync(ByVal sender As Object, ByVal e As Microsoft.SharePoint.Linq.AssociationChangedEventArgs(Of Item))
	End Sub
End Class

'''<summary>
'''Upload an image.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Image", Id:="0x0101009148F5A04DDD49CBA7127AADA5FB792B00AADE34325A8B49CDA8BB4DB53328F214")>  _
Partial Public Class Image
	Inherits Asset
	
	Private _pictureSize As String
	
	Private _pictureWidth As System.Nullable(Of Integer)
	
	Private _pictureHeight As System.Nullable(Of Integer)
	
	Private _comments As String
	
	Private _author As String
	
	Private _datePictureTaken As System.Nullable(Of Date)
	
	Private _copyright As String
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ImageSize", Storage:="_pictureSize", FieldType:="Computed")>  _
	Public Property PictureSize() As String
		Get
			Return Me._pictureSize
		End Get
		Set
			If (value <> Me._pictureSize) Then
				Me.OnPropertyChanging("PictureSize", Me._pictureSize)
				Me._pictureSize = value
				Me.OnPropertyChanged("PictureSize")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ImageWidth", Storage:="_pictureWidth", [ReadOnly]:=true, FieldType:="Integer")>  _
	Public Property PictureWidth() As System.Nullable(Of Integer)
		Get
			Return Me._pictureWidth
		End Get
		Set
			If (value <> Me._pictureWidth) Then
				Me.OnPropertyChanging("PictureWidth", Me._pictureWidth)
				Me._pictureWidth = value
				Me.OnPropertyChanged("PictureWidth")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ImageHeight", Storage:="_pictureHeight", [ReadOnly]:=true, FieldType:="Integer")>  _
	Public Property PictureHeight() As System.Nullable(Of Integer)
		Get
			Return Me._pictureHeight
		End Get
		Set
			If (value <> Me._pictureHeight) Then
				Me.OnPropertyChanging("PictureHeight", Me._pictureHeight)
				Me._pictureHeight = value
				Me.OnPropertyChanged("PictureHeight")
			End If
		End Set
	End Property
	
	'''<summary>
	'''A summary of this resource
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	'''<summary>
	'''The primary author
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Author", Storage:="_author", FieldType:="Text")>  _
	Public Property Author() As String
		Get
			Return Me._author
		End Get
		Set
			If (value <> Me._author) Then
				Me.OnPropertyChanging("Author", Me._author)
				Me._author = value
				Me.OnPropertyChanged("Author")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="ImageCreateDate", Storage:="_datePictureTaken", FieldType:="DateTime")>  _
	Public Property DatePictureTaken() As System.Nullable(Of Date)
		Get
			Return Me._datePictureTaken
		End Get
		Set
			If (value <> Me._datePictureTaken) Then
				Me.OnPropertyChanging("DatePictureTaken", Me._datePictureTaken)
				Me._datePictureTaken = value
				Me.OnPropertyChanged("DatePictureTaken")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="wic_System_Copyright", Storage:="_copyright", FieldType:="Text")>  _
	Public Property Copyright() As String
		Get
			Return Me._copyright
		End Get
		Set
			If (value <> Me._copyright) Then
				Me.OnPropertyChanging("Copyright", Me._copyright)
				Me._copyright = value
				Me.OnPropertyChanged("Copyright")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Upload an audio file.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Audio", Id:="0x0101009148F5A04DDD49CBA7127AADA5FB792B006973ACD696DC4858A76371B2FB2F439A")>  _
Partial Public Class Audio
	Inherits Asset
	
	Private _author As String
	
	Private _comments As String
	
	Private _previewImageURL As String
	
	Private _copyright As String
	
	Private _lengthSeconds As System.Nullable(Of Integer)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	'''<summary>
	'''The primary author
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Author", Storage:="_author", FieldType:="Text")>  _
	Public Property Author() As String
		Get
			Return Me._author
		End Get
		Set
			If (value <> Me._author) Then
				Me.OnPropertyChanging("Author", Me._author)
				Me._author = value
				Me.OnPropertyChanged("Author")
			End If
		End Set
	End Property
	
	'''<summary>
	'''A summary of this resource
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AlternateThumbnailUrl", Storage:="_previewImageURL", FieldType:="Url")>  _
	Public Property PreviewImageURL() As String
		Get
			Return Me._previewImageURL
		End Get
		Set
			If (value <> Me._previewImageURL) Then
				Me.OnPropertyChanging("PreviewImageURL", Me._previewImageURL)
				Me._previewImageURL = value
				Me.OnPropertyChanged("PreviewImageURL")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="wic_System_Copyright", Storage:="_copyright", FieldType:="Text")>  _
	Public Property Copyright() As String
		Get
			Return Me._copyright
		End Get
		Set
			If (value <> Me._copyright) Then
				Me.OnPropertyChanging("Copyright", Me._copyright)
				Me._copyright = value
				Me.OnPropertyChanged("Copyright")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MediaLengthInSeconds", Storage:="_lengthSeconds", FieldType:="Integer")>  _
	Public Property LengthSeconds() As System.Nullable(Of Integer)
		Get
			Return Me._lengthSeconds
		End Get
		Set
			If (value <> Me._lengthSeconds) Then
				Me.OnPropertyChanging("LengthSeconds", Me._lengthSeconds)
				Me._lengthSeconds = value
				Me.OnPropertyChanged("LengthSeconds")
			End If
		End Set
	End Property
End Class

'''<summary>
'''Upload a video file.
'''</summary>
<Microsoft.SharePoint.Linq.ContentTypeAttribute(Name:="Video", Id:="0x0101009148F5A04DDD49CBA7127AADA5FB792B00291D173ECE694D56B19D111489C4369D")>  _
Partial Public Class Video
	Inherits Asset
	
	Private _author As String
	
	Private _comments As String
	
	Private _previewImageURL As String
	
	Private _copyright As String
	
	Private _lengthSeconds As System.Nullable(Of Integer)
	
	Private _frameWidth As System.Nullable(Of Integer)
	
	Private _frameHeight As System.Nullable(Of Integer)
	
	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate()
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	#End Region
	
	Public Sub New()
		MyBase.New
		Me.OnCreated
	End Sub
	
	'''<summary>
	'''The primary author
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Author", Storage:="_author", FieldType:="Text")>  _
	Public Property Author() As String
		Get
			Return Me._author
		End Get
		Set
			If (value <> Me._author) Then
				Me.OnPropertyChanging("Author", Me._author)
				Me._author = value
				Me.OnPropertyChanged("Author")
			End If
		End Set
	End Property
	
	'''<summary>
	'''A summary of this resource
	'''</summary>
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="_Comments", Storage:="_comments", FieldType:="Note")>  _
	Public Property Comments() As String
		Get
			Return Me._comments
		End Get
		Set
			If (value <> Me._comments) Then
				Me.OnPropertyChanging("Comments", Me._comments)
				Me._comments = value
				Me.OnPropertyChanged("Comments")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="AlternateThumbnailUrl", Storage:="_previewImageURL", FieldType:="Url")>  _
	Public Property PreviewImageURL() As String
		Get
			Return Me._previewImageURL
		End Get
		Set
			If (value <> Me._previewImageURL) Then
				Me.OnPropertyChanging("PreviewImageURL", Me._previewImageURL)
				Me._previewImageURL = value
				Me.OnPropertyChanged("PreviewImageURL")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="wic_System_Copyright", Storage:="_copyright", FieldType:="Text")>  _
	Public Property Copyright() As String
		Get
			Return Me._copyright
		End Get
		Set
			If (value <> Me._copyright) Then
				Me.OnPropertyChanging("Copyright", Me._copyright)
				Me._copyright = value
				Me.OnPropertyChanged("Copyright")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="MediaLengthInSeconds", Storage:="_lengthSeconds", FieldType:="Integer")>  _
	Public Property LengthSeconds() As System.Nullable(Of Integer)
		Get
			Return Me._lengthSeconds
		End Get
		Set
			If (value <> Me._lengthSeconds) Then
				Me.OnPropertyChanging("LengthSeconds", Me._lengthSeconds)
				Me._lengthSeconds = value
				Me.OnPropertyChanged("LengthSeconds")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="VideoWidthInPixels", Storage:="_frameWidth", FieldType:="Integer")>  _
	Public Property FrameWidth() As System.Nullable(Of Integer)
		Get
			Return Me._frameWidth
		End Get
		Set
			If (value <> Me._frameWidth) Then
				Me.OnPropertyChanging("FrameWidth", Me._frameWidth)
				Me._frameWidth = value
				Me.OnPropertyChanged("FrameWidth")
			End If
		End Set
	End Property
	
	<Microsoft.SharePoint.Linq.ColumnAttribute(Name:="VideoHeightInPixels", Storage:="_frameHeight", FieldType:="Integer")>  _
	Public Property FrameHeight() As System.Nullable(Of Integer)
		Get
			Return Me._frameHeight
		End Get
		Set
			If (value <> Me._frameHeight) Then
				Me.OnPropertyChanging("FrameHeight", Me._frameHeight)
				Me._frameHeight = value
				Me.OnPropertyChanged("FrameHeight")
			End If
		End Set
	End Property
End Class

Public Enum Category As Integer
	
	None = 0
	
	Invalid = 1
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(1) Category1")>  _
	_1Category1 = 2
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(2) Category2")>  _
	_2Category2 = 4
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(3) Category3")>  _
	_3Category3 = 8
End Enum

Public Enum Priority As Integer
	
	None = 0
	
	Invalid = 1
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(1) High")>  _
	_1High = 2
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(2) Normal")>  _
	_2Normal = 4
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="(3) Low")>  _
	_3Low = 8
End Enum

Public Enum TaskStatus As Integer
	
	None = 0
	
	Invalid = 1
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="Not Started")>  _
	NotStarted = 2
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="In Progress")>  _
	InProgress = 4
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="Completed")>  _
	Completed = 8
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="Deferred")>  _
	Deferred = 16
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="Waiting on someone else")>  _
	WaitingOnSomeoneElse = 32
End Enum

Public Enum ContentCategory As Integer
	
	None = 0
	
	Invalid = 1
	
	<Microsoft.SharePoint.Linq.ChoiceAttribute(Value:="None")>  _
	None0 = 2
End Enum
